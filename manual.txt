server.js 
    App.js
        mongo connection
            model 
                order.js (_id,product,quantity)
                product.js (_id,name,price,productImage)
                user.js (_id,image,password)
        morgan log
        body parser
        cross origin
        static '/uploads'
        route 
                user.js             => "/user/"
                    sign_up             => post "/signup"
                    log_in              => post "/login"
                    delete_id           => delete "/:userId"
                    
                product.js          => "/products/"
                    get_all_products    => get "/"             => ProductsController.products_get_all     
                    post_product        => post "/"   
                                           checkAuth 
                                           upload.single('productImage') => upload = multer()
                                                               => ProductsController.products_create_product
                    get_product_byID    => get "/:productId"   => ProductsController.products_get_product
                                
                    update_product_byID => patch "/:productId" 
                                           checkAuth
                                                               => ProductsController.products_update_product                    
                    delete_product_byID => delete "/:productId"
                                           checkAuth
                                                               => ProductsController.products_delete
                                                               
                order.js => "/orders/"
                    get_all_orders      => get "/"  
                                           checkAuth
                                                               => OrdersController.orders_get_all
                    post_order          => post "/"
                                           checkAuth
                                                               => OrdersController.orders_create_order
                    get_order_byID      => get "/:orderId"
                                           checkAuth 
                                                               => OrdersController.orders_get_order                                            
                    delete_order_byID   => delete "/:orderId"   
                                           checkAuth
                                                               => OrdersController.orders_delete_order
        
        error                                               //res.404."NotFound"
        
==========================================================
check-auth.js    (req, res, next)        
        token = req.headers.authorization.split(" ")[1];
            decoded = jwt.verify(token, process.env.JWT_KEY);
                req.userData = decoded;

==========================================================
user.js
    user_signup (req, res, next)
         User.find ({ email: req.body.email }) =>user      // catch
            if (user.length >= 1)                          // res.409."Mail exists"
            bcrypt.hash (req.body.password, 10 ) => hash   // res.500.err 
                user = new User(_id,email,hash password)  
                user.save()                                // catch
                    res.201."User created"
          catch                                            //res.201.error
------------------------------------------          
    user_login (req, res, next) 
        User.find({ email: req.body.email }) => user             //catch
            if (user.length < 1)                                 //res.401."Auth failed"
            bcrypt.compare(req.body.password, user[0].password)  //res.401.err
                token = jwt.sign (email,_id,JWT.KEY,expiresIn)   
                    res.200."Auth successful"
        catch                                                    //res.500.err
-------------------------------------------  
    user_delete (req, res, next) 
        User.remove({ _id: req.params.userId })    
            res.200."user deleted"
        catch                                                    //res.500.err
            
=========================================================

product.js
    products_get_all (req, res, next)
         Product.find()     
            res.200.product(name price _id productImage) 
         catch                                                   //res.500.err
-------------------------------------------
    products_create_product (req, res, next)
         product = new Product(_id,name,price,productImage)
         product.save()
            res.200."created successfully",product
         catch                                                   //res.500.err 
-------------------------------------------            
    products_get_product (req, res, next)       
         Product.findById(req.params.productId;)   
            if (product)                                         //res.404."No id found"
                res.200.product 
         catch                                                   //res.500.err 
-------------------------------------------   
    products_update_product (req, res, next)            
         Product.update({ _id: id }, { $set: updateOps } 
            res.200."Updated"
         catch                                                    //res.500.err
-------------------------------------------            
    products_delete (req, res, next)             
         Product.remove({ _id:req.params.productId})
            res.200."removed"
         catch                                                    //res.500.err    
=========================================================           
            
            
            
            
            
            
            
        
        
        
        
        
        
        
        
        
        
